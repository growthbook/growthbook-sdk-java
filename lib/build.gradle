/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 */

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "io.freefair.gradle:lombok-plugin:8.6"
    }
}

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'maven-publish'
    id 'jacoco'
    id "io.freefair.lombok" version "8.6"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

group = 'com.github.growthbook'
version = 'main-SNAPSHOT'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains:annotations:24.0.0'

    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation 'org.mockito:mockito-core:4.8.0'

    implementation 'org.apache.commons:commons-math3:3.6.1'
    implementation 'com.google.guava:guava:31.0.1-jre'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation 'com.google.code.gson:gson:2.9.1'

    // https://square.github.io/okhttp
    implementation 'com.squareup.okhttp3:okhttp:4.11.0'
    // https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp-sse
    implementation 'com.squareup.okhttp3:okhttp-sse:4.11.0'

    // Adds getter, setter and builder boilerplate
    // https://projectlombok.org/
    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'

    // logging
    implementation 'org.slf4j:slf4j-api:2.0.7'
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}

java {
    withSourcesJar()

    // This fails for Java 19
    // ref: https://github.com/growthbook/growthbook-sdk-java/actions/runs/3413815008/jobs/5680998078#step:5:44
    withJavadocJar()
}

// Generates documentation in ./lib/build/docs/javadoc
javadoc {
    options.memberLevel = JavadocMemberLevel.PUBLIC

    build {
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

test {
    // Test run results are available at: ./lib/build/reports/tests/test/index.html
    // Test coverage reports are available at: ./lib/build/jacocoHtml/index.html
    finalizedBy jacocoTestReport // report is always generated after tests run
}

// More configuration options, including enforcing code coverage available here:
// https://docs.gradle.org/current/userguide/jacoco_plugin.html
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report

    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}
