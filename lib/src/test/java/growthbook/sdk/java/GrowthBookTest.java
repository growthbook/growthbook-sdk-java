/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package growthbook.sdk.java;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import growthbook.sdk.java.callback.ExperimentRunCallback;
import growthbook.sdk.java.callback.FeatureUsageCallback;
import growthbook.sdk.java.evaluators.ConditionEvaluator;
import growthbook.sdk.java.evaluators.ExperimentEvaluator;
import growthbook.sdk.java.evaluators.FeatureEvaluator;
import growthbook.sdk.java.model.Experiment;
import growthbook.sdk.java.model.ExperimentResult;
import growthbook.sdk.java.model.Feature;
import growthbook.sdk.java.model.FeatureResult;
import growthbook.sdk.java.model.FeatureResultSource;
import growthbook.sdk.java.model.GBContext;
import growthbook.sdk.java.multiusermode.util.TransformationUtil;
import growthbook.sdk.java.repository.GBFeaturesRepository;
import growthbook.sdk.java.testhelpers.PaperCupsConfig;
import growthbook.sdk.java.testhelpers.TestCasesJsonHelper;
import growthbook.sdk.java.testhelpers.TestContext;
import growthbook.sdk.java.util.DecryptionUtils;
import growthbook.sdk.java.util.GrowthBookJsonUtils;
import lombok.Getter;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;

import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

class GrowthBookTest {

    final TestCasesJsonHelper helper = TestCasesJsonHelper.getInstance();
    final GrowthBookJsonUtils jsonUtils = GrowthBookJsonUtils.getInstance();

    @Test
    void test_evalFeature() {
        JsonArray testCases = helper.featureTestCases();

        ArrayList<String> passedTests = new ArrayList<>();
        ArrayList<String> failedTests = new ArrayList<>();
        ArrayList<Integer> failingIndexes = new ArrayList<>();

        for (int i = 0; i < testCases.size(); i++) {
            JsonArray testCase = (JsonArray) testCases.get(i);
            String testDescription = testCase.get(0).getAsString();

            JsonElement featuresJson = testCase.get(1).getAsJsonObject().get("features");
            String featureJsonAsStringOrNull = featuresJson == null ? null : featuresJson.toString();

            JsonElement attributesJson = testCase.get(1).getAsJsonObject().get("attributes");
            String attributesJsonAsStringOrNull = attributesJson == null ? null : attributesJson.toString();

            Type forcedVariationsType = new TypeToken<HashMap<String, Integer>>() {
            }.getType();
            HashMap<String, Integer> forcedVariations = jsonUtils.gson.fromJson(testCase.get(1).getAsJsonObject().get("forcedVariations"), forcedVariationsType);

            JsonElement savedGroupsJson = testCase.get(1).getAsJsonObject().get("savedGroups");
            JsonObject savedGroups = savedGroupsJson == null ? null : (JsonObject) savedGroupsJson;

//            System.out.println("\n\n--------------------------");
//            System.out.printf("evalFeature test: %s (index = %s)", testDescription, i);
//            System.out.printf("\n features: %s", featuresJson);
//            System.out.printf("\n attributesJson: %s", attributesJson);

            GBContext context = GBContext
                    .builder()
                    .featuresJson(featureJsonAsStringOrNull)
                    .attributesJson(attributesJsonAsStringOrNull)
                    .forcedVariationsMap(forcedVariations)
                    .savedGroups(savedGroups)
                    .build();

//            System.out.printf("\n context: %s", context);
            String featureKey = testCase.get(2).getAsString();
//            String type = testCase.get("type").getAsString();
            GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);

            if (featuresJson != null) {
                Type featureMapType = new com.google.common.reflect.TypeToken<Map<String, Feature<?>>>() {
                }.getType();
                Map<String, Feature<?>> featuresMap = jsonUtils.gson.fromJson(featuresJson, featureMapType);
                when(featuresRepository.getParsedFeatures()).thenReturn(featuresMap);
            }

            GrowthBook subject = new GrowthBook(context, featuresRepository);
            JsonElement expected = testCase.get(3).getAsJsonObject();
//            System.out.printf("\n\n Expected result (string): %s", expectedString);
            FeatureResult expectedResult = jsonUtils.gson.fromJson(expected, FeatureResult.class);

            FeatureResult<Object> result = subject.evalFeature(featureKey, Object.class);
//            System.out.printf("\n\n Eval Feature actual: %s - JSON: %s", result, result.toJson());
//            System.out.printf("\n\n Eval Feature expected: %s - JSON: %s", expectedResult, expectedResult.toJson());

            boolean valuePasses = Objects.equals(expectedResult.getValue(), result != null ? result.getValue() : null);
            if (!valuePasses) {
                System.out.printf("\n\nExpected value: %s, Actual value: %s", expectedResult.getValue(), result != null ? result.getValue() : null);
            }
            boolean onPasses = Objects.equals(expectedResult.isOn(), result != null ? result.isOn() : null);
            if (!onPasses) {
                System.out.printf("\n\nExpected isOn: %s, Actual isOn: %s", expectedResult.isOn(), result != null ? result.isOn() : null);
            }
            boolean offPasses = Objects.equals(expectedResult.isOff(), result != null ? result.isOff() : null);
            if (!offPasses) {
                System.out.printf("\n\nExpected isOff: %s, Actual isOff: %s", expectedResult.isOff(), result != null ? result.isOff() : null);
            }
            boolean sourcePasses = Objects.equals(expectedResult.getSource(), result != null ? result.getSource() : null);
            if (!sourcePasses) {
                System.out.printf("\n\nExpected getSource: %s, Actual getSource: %s", expectedResult.getSource(), result != null ? result.getSource() : null);
            }

            // Hash value on experiment
            boolean hashValuePasses = true;
            boolean bucketPasses = true;
            boolean keyPasses = true;
            if (expectedResult.getExperimentResult() != null) {
                System.out.printf("\n\nHas an experiment result: %s (index = %s)", testDescription, i);
                ExperimentResult actualResult = result != null ? result.getExperimentResult() : null;
                String actualHashValue = actualResult != null ? actualResult.getHashValue() : null;
                hashValuePasses = Objects.equals(expectedResult.getExperimentResult().getHashValue(), actualHashValue);
                if (!hashValuePasses) {
                    System.out.printf("\n\nExpected getExperimentResult().getHashValue(): %s, Actual getExperimentResult().getHashValue(): %s", expectedResult.getExperimentResult().getHashValue(), actualHashValue);
                }

                Float expectedBucket = expectedResult.getExperimentResult().getBucket();
                Float actualBucket = actualResult != null ? result.getExperimentResult().getBucket() : null;
                bucketPasses = Objects.equals(expectedBucket, actualBucket);
                if (!bucketPasses) {
                    System.out.printf("\n\nExpected bucket: %s, Actual bucket: %s", expectedBucket, actualBucket);
                }
                String expectedKey = expectedResult.getExperimentResult().getKey();
                String actualKey = actualResult != null ? result.getExperimentResult().getKey() : null;
                keyPasses = Objects.equals(expectedKey, actualKey);
                if (!keyPasses) {
                    System.out.printf("\n\nExpected key: %s, Actual key: %s", expectedKey, actualKey);
                }
            }
            String expectedResultRuleId = expectedResult.getRuleId();
            String actualResultRuleId = result.getRuleId();
            boolean ruleIdPass = Objects.equals(expectedResultRuleId, actualResultRuleId);
            if (!ruleIdPass) {
                System.out.printf("\n\nExpected rule id: %s, Actual rule id: %s", expectedResultRuleId, actualResultRuleId);

            }

            boolean passes = valuePasses && onPasses && offPasses && sourcePasses && hashValuePasses && keyPasses && bucketPasses && ruleIdPass;

            if (passes) {
                passedTests.add(testDescription);
            } else {
//                System.out.printf("\n\nevalFeature test: %s (index = %s)", testDescription, i);
//                System.out.printf("\n r %s", featuresJson);
//                System.out.printf("\n attributesJson: %s", attributesJson);
                System.out.printf("\n\nExpected result = %s", expectedResult);
                System.out.printf("\n  Actual result = %s", result);

                System.out.printf(
                        "\n\n valuePasses = %s, onPasses = %s, offPasses = %s, sourcePasses = %s, hashValuePasses = %s, keyPasses = %s, bucketPasses = %s",
                        valuePasses, onPasses, offPasses, sourcePasses, hashValuePasses, keyPasses, bucketPasses
                );
//                System.out.println("\n\n-------------------------------");

                failedTests.add(testDescription);
                failingIndexes.add(i);
            }
        }

        System.out.printf("\n\n✅ evalFeature - Passed tests: %s", passedTests);
        System.out.printf("\n\n\n❗️ evalFeature - Failed tests = %s / %s . Failing = %s", failedTests.size(), testCases.size(), failedTests);
        System.out.printf("\n\n\n evalFeature - Failing indexes = %s", failingIndexes);

        assertEquals(0, failedTests.size(), "There are failing tests");
    }

    @Test
    void test_evalFeature_callsFeatureUsageCallback() {
        ArgumentCaptor<FeatureResult<String>> captor = ArgumentCaptor.forClass(FeatureResult.class);
        FeatureUsageCallback featureUsageCallback = mock(FeatureUsageCallback.class);
        String features = TestCasesJsonHelper.getInstance().getDemoFeaturesJson();
        GBContext context = GBContext
                .builder()
                .featuresJson(features)
                .featureUsageCallback(featureUsageCallback)
                .build();

        Map<String, Feature<?>> featuresMap = TransformationUtil.transformFeatures(features);

        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        when(featuresRepository.getParsedFeatures()).thenReturn(featuresMap);

        GrowthBook subject = new GrowthBook(context, featuresRepository);

        String value = subject.getFeatureValue("h1-title", "unknown feature key");

        // verify the key
        verify(featureUsageCallback).onFeatureUsage(eq("h1-title"), captor.capture());
        // verify the feature result
        FeatureResult<String> featureResult = captor.getValue();
        assertEquals("Welcome to our app!!!", value);
        assertEquals("Welcome to our app!!!", featureResult.getValue());
        assertEquals(FeatureResultSource.DEFAULT_VALUE, featureResult.getSource());
    }

    @Test
    void run_executesExperimentResultCallbacks() {
        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);

        GrowthBook subject = new GrowthBook(featuresRepository);
        ExperimentRunCallback mockCallback1 = mock(ExperimentRunCallback.class);
        ExperimentRunCallback mockCallback2 = mock(ExperimentRunCallback.class);
        Experiment<String> mockExperiment = Experiment.<String>builder().build();

        subject.subscribe(mockCallback1);
        subject.subscribe(mockCallback2);
        ExperimentResult<String> result = subject.run(mockExperiment);

        verify(mockCallback1).onRun(mockExperiment, result);
        verify(mockCallback2).onRun(mockExperiment, result);
    }

    @Test
    void run_executesExperimentResultCallbacksOnceWhenRunInvokeMultipleTimes() {
        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        GrowthBook subject = new GrowthBook(featuresRepository);
        ExperimentRunCallback mockCallback = mock(ExperimentRunCallback.class);
        Experiment<String> mockExperiment = Experiment.<String>builder().build();

        subject.subscribe(mockCallback);
        subject.run(mockExperiment);
        subject.run(mockExperiment);
        subject.run(mockExperiment);

        verify(mockCallback, times(1)).onRun(any(), any());
    }

    @Test
    void run_executesExperimentResultCallbacksTwiceWhenRunInvokeMultipleTimes() {
        ExperimentEvaluator experimentEvaluator = mock(ExperimentEvaluator.class);
        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        GrowthBook subject = new GrowthBook(
                mock(GBContext.class),
                mock(FeatureEvaluator.class),
                null,
                experimentEvaluator,
                featuresRepository
        );

        ExperimentRunCallback mockCallback = mock(ExperimentRunCallback.class);
        Experiment<String> mockExperiment1 = Experiment.<String>builder()
                .key("test1")
                .bucketVersion(1)
                .conditionJson(new JsonObject())
                .coverage(1.0f)
                .force(1)
                .meta(new ArrayList<>())
                .name("exp")
                .disableStickyBucketing(false)
                .phase("superphase")
                .fallbackAttribute("anon")
                .filters(new ArrayList<>())
                .seed("seed")
                .hashAttribute("id")
                .hashVersion(1)
                .isActive(true)
                .minBucketVersion(1)
                .parentConditions(new ArrayList<>())
                .ranges(new ArrayList<>())
                .variations(new ArrayList<>())
                .weights(new ArrayList<>())
                .build();
        Experiment<String> mockExperiment2 = Experiment.<String>builder()
                .key("test2")
                .bucketVersion(1)
                .conditionJson(new JsonObject())
                .coverage(0.5f)
                .force(1)
                .meta(new ArrayList<>())
                .name("exp")
                .disableStickyBucketing(false)
                .phase("superphase1")
                .fallbackAttribute("anon1")
                .filters(new ArrayList<>())
                .seed("seed")
                .hashAttribute("id")
                .hashVersion(2)
                .isActive(true)
                .minBucketVersion(1)
                .parentConditions(new ArrayList<>())
                .ranges(new ArrayList<>())
                .variations(new ArrayList<>())
                .weights(new ArrayList<>())
                .build();

        ExperimentResult<String> expRes1 = ExperimentResult.<String>builder()
                .inExperiment(true)
                .variationId(0)
                .key("test1")
                .name("exp")
                .bucket(0.0f)
                .value("")
                .featureId("feature")
                .hashAttribute("id")
                .hashUsed(true)
                .passThrough(true)
                .stickyBucketUsed(false)
                .build();

        ExperimentResult<String> expRes2 = ExperimentResult.<String>builder()
                .inExperiment(false)
                .variationId(1)
                .key("test2")
                .name("exp")
                .bucket(0.0f)
                .value("")
                .featureId("feature")
                .hashAttribute("id")
                .hashUsed(true)
                .passThrough(true)
                .stickyBucketUsed(false)
                .build();

        when(experimentEvaluator.evaluateExperiment(eq(mockExperiment1), any(), any())).thenReturn(expRes1);
        when(experimentEvaluator.evaluateExperiment(eq(mockExperiment2), any(), any())).thenReturn(expRes2);

        subject.subscribe(mockCallback);
        subject.run(mockExperiment1);
        subject.run(mockExperiment2);
        subject.run(mockExperiment1);

        verify(mockCallback, times(2)).onRun(any(), any());
    }

    @Test
    void test_runExperiment() {
        JsonArray testCases = helper.runTestCases();

        ArrayList<String> passedTests = new ArrayList<>();
        ArrayList<String> failedTests = new ArrayList<>();
        ArrayList<Integer> failingIndexes = new ArrayList<>();

        for (int i = 0; i < testCases.size(); i++) {

            JsonArray itemArray = (JsonArray) testCases.get(i);
            if (itemArray != null) {
                String testDescription = itemArray.get(0).getAsString();

                JsonElement featuresJson = itemArray.get(1).getAsJsonObject().get("features");
                String featuresJsonString = featuresJson == null ? "{}" : featuresJson.toString();

                JsonElement attributesJson = itemArray.get(1).getAsJsonObject().get("attributes");
                String attributesJsonString = attributesJson == null ? "null" : attributesJson.toString();

                Type forcedVariationsType = new TypeToken<HashMap<String, Integer>>() {
                }.getType();
                HashMap<String, Integer> forcedVariations = jsonUtils.gson.fromJson(itemArray.get(1).getAsJsonObject().get("forcedVariations"), forcedVariationsType);

                JsonElement savedGroups = itemArray.get(1).getAsJsonObject().get("savedGroups");
                JsonObject savedGroupToPass = savedGroups == null ? null : savedGroups.getAsJsonObject();


                TestContext testContext = jsonUtils.gson.fromJson(itemArray.get(1).getAsJsonObject(), TestContext.class);
                GBContext context = GBContext
                        .builder()
                        .featuresJson(featuresJsonString)
                        .attributesJson(attributesJsonString)
                        .forcedVariationsMap(forcedVariations)
                        .isQaMode(testContext.qaMode)
                        .enabled(testContext.enabled)
                        .url(testContext.url)
                        .savedGroups(savedGroupToPass)
                        .build();

                Experiment experiment = jsonUtils.gson.fromJson(itemArray.get(2).getAsJsonObject(), Experiment.class);
//                ExperimentResult expectedResult = jsonUtils.gson.fromJson(itemArray.get(3), ExperimentResult.class);
                JsonElement experimentElement = jsonUtils.gson.fromJson(itemArray.get(2), JsonElement.class);

                if (experimentElement != null) {
//                System.out.printf("\n\n HERE: Experiment %s (index = %s)", experiment, i);
                    JsonObject experimentObject = jsonUtils.gson.fromJson(experimentElement.getAsJsonObject(), JsonObject.class);
                    JsonObject conditionElement = experimentObject.getAsJsonObject("condition");
                    if (conditionElement != null) {
                        experiment.setConditionJson(conditionElement);
                    }
                }
                Map<String, Feature<?>> featuresMap = TransformationUtil.transformFeatures(featuresJsonString);

                GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
                when(featuresRepository.getParsedFeatures()).thenReturn(featuresMap);

                GrowthBook subject = new GrowthBook(context, featuresRepository);
                ExperimentResult result = subject.run(experiment);
                ExperimentResult expectedResult = new ExperimentResult<>(itemArray.get(3), null, itemArray.get(4).getAsBoolean(), null, null, null, itemArray.get(5).getAsBoolean(), null, null, null, null, null);
                String json = expectedResult.toJson();
                ExperimentResult experimentResult11111 = jsonUtils.gson.fromJson(json, ExperimentResult.class);


                boolean valueMatches = Objects.equals(result.getValue(), experimentResult11111.getValue());
                boolean inExperimentMatches = Objects.equals(result.getInExperiment(), experimentResult11111.getInExperiment());
                boolean hashUsed = Objects.equals(result.getHashUsed(), experimentResult11111.getHashUsed());

                boolean passes = valueMatches && inExperimentMatches && hashUsed;

                if (passes) {
                    passedTests.add(testDescription);
                } else {
                    System.out.println("-----");
                    System.out.printf("\n\n Test %s - (index = %s) Testing with context: %s", testDescription, i, context);
                    System.out.printf("\n\n Experiment: %s", experiment);

                    System.out.printf("\n\nExpected result = %s", itemArray.get(3));
                    System.out.printf("\n  Actual result = %s", result);

                    failedTests.add(testDescription);
                    failingIndexes.add(i);
                }
            }
        }


        System.out.printf("\n\n✅ run Experiment - Passed tests: %s", passedTests);
        System.out.printf("\n\n\n❗️ run Experiment - Failed tests = %s / %s . Failing = %s", failedTests.size(), testCases.size(), failedTests);
        System.out.printf("\n\n\n run Experiment - Failing indexes = %s", failingIndexes);

        assertEquals(0, failedTests.size(), "There are failing tests");
    }

    @Test
    void test_isOn_returns_true() {
        String featureKey = "new-feature";
        String attributes = "{ \"user_group\": \"subscriber\", \"beta_users\": true }";
        String features = TestCasesJsonHelper.getInstance().getDemoFeaturesJson();

        Map<String, Feature<?>> featuresMap = TransformationUtil.transformFeatures(features);

        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        when(featuresRepository.getParsedFeatures()).thenReturn(featuresMap);

        GBContext context = GBContext
                .builder()
                .featuresJson(features)
                .attributesJson(attributes)
                .build();
        GrowthBook subject = new GrowthBook(context, featuresRepository);

        FeatureResult feature = subject.evalFeature(featureKey, Object.class);

        if (feature != null) {
            assertTrue(feature.isOn());
            assertFalse(feature.isOff());
        }
    }

    @Test
    void test_isOn_returns_false() {
        String featureKey = "new-feature";
        String attributes = "{ \"user_group\": \"standard\", \"beta_users\": false }";
        String features = TestCasesJsonHelper.getInstance().getDemoFeaturesJson();

        GBContext context = GBContext
                .builder()
                .featuresJson(features)
                .attributesJson(attributes)
                .build();
        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        GrowthBook subject = new GrowthBook(context, featuresRepository);

        assertFalse(subject.isOn(featureKey));
        assertTrue(subject.isOff(featureKey));
    }

    @Test
    void test_isOn_should_be_stable() {
        String featureKey = "flag";

        JsonObject jsonObject1 = new JsonObject();
        JsonObject jsonObject2 = new JsonObject();
        jsonObject2.add("defaultValue", new JsonPrimitive(true));
        jsonObject1.add(featureKey, jsonObject2);
        Map<String, Feature<?>> stringFeatureMap = TransformationUtil.transformFeatures(jsonObject1.toString());

        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        when(featuresRepository.getParsedFeatures()).thenReturn(stringFeatureMap);

        GBContext context = GBContext
                .builder()
                .features(stringFeatureMap)
                .build();

        GrowthBook subject = new GrowthBook(context, featuresRepository);
        assertTrue(subject.isOn(featureKey));
        assertTrue(subject.isOn(featureKey));
    }

    @Test
    void test_getFeatureValue_boolean() {
        String featureKey = "new-feature";
        String attributes = "{ \"user_group\": \"subscriber\", \"beta_users\": true }";
        String features = TestCasesJsonHelper.getInstance().getDemoFeaturesJson();

        Map<String, Feature<?>> featuresMap = TransformationUtil.transformFeatures(features);

        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        when(featuresRepository.getParsedFeatures()).thenReturn(featuresMap);

        GBContext context = GBContext
                .builder()
                .featuresJson(features)
                .attributesJson(attributes)
                .build();
        GrowthBook subject = new GrowthBook(context, featuresRepository);

        Boolean result = subject.getFeatureValue(featureKey, false);

        assertTrue(result);
    }

    @Test
    void test_getFeatureValue_string_inExperiment() {
        String featureKey = "covid-banner-text";
        String attributes = "{ \"user_group\": \"subscriber\", \"beta_users\": true }";
        String features = TestCasesJsonHelper.getInstance().getDemoFeaturesJson();

        Map<String, Feature<?>> featuresMap = TransformationUtil.transformFeatures(features);

        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        when(featuresRepository.getParsedFeatures()).thenReturn(featuresMap);

        GBContext context = GBContext
                .builder()
                .featuresJson(features)
                .attributesJson(attributes)
                .build();
        GrowthBook subject = new GrowthBook(context, featuresRepository);

        String result = subject.getFeatureValue(featureKey, "nope");

        assertEquals("Beta users", result);
    }

    @Test
    void test_getFeatureValue_string_notInExperiment() {
        String featureKey = "covid-banner-text";
        String attributes = "{ \"user_group\": \"subscriber\", \"beta_users\": false }";
        String features = TestCasesJsonHelper.getInstance().getDemoFeaturesJson();

        GBContext context = GBContext
                .builder()
                .featuresJson(features)
                .attributesJson(attributes)
                .build();

        Map<String, Feature<?>> featuresMap = TransformationUtil.transformFeatures(features);

        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        when(featuresRepository.getParsedFeatures()).thenReturn(featuresMap);


        GrowthBook subject = new GrowthBook(context, featuresRepository);

        String result = subject.getFeatureValue(featureKey, "nope");

        assertEquals("We're safe", result);
    }

    @Test
    void test_getFeatureValue_double_inExperiment() {
        String featureKey = "demo";
        String attributes = "{ \"admin\": true }";
        String features = TestCasesJsonHelper.getInstance().getDemoFeaturesJson();

        GBContext context = GBContext
                .builder()
                .featuresJson(features)
                .attributesJson(attributes)
                .build();

        Map<String, Feature<?>> featuresMap = TransformationUtil.transformFeatures(features);

        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        when(featuresRepository.getParsedFeatures()).thenReturn(featuresMap);

        GrowthBook subject = new GrowthBook(context, featuresRepository);

        Double result = subject.getFeatureValue(featureKey, Double.valueOf(999));

        assertEquals(1, result);
    }

    @Test
    void test_getFeatureValue_integer_inExperiment() {
        String featureKey = "demo";
        String attributes = "{ \"admin\": true }";
        String features = TestCasesJsonHelper.getInstance().getDemoFeaturesJson();

        Map<String, Feature<?>> featuresMap = TransformationUtil.transformFeatures(features);

        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        when(featuresRepository.getParsedFeatures()).thenReturn(featuresMap);

        GBContext context = GBContext
                .builder()
                .featuresJson(features)
                .attributesJson(attributes)
                .build();


        GrowthBook subject = new GrowthBook(context, featuresRepository);

        Integer result = subject.getFeatureValue(featureKey, 999);

        assertEquals(1, result);
    }

    @Test
    void test_getFeatureValue_float() {
        String featureKey = "price";
        String attributes = "{ \"user\": \"standard\" }";
        String features = TestCasesJsonHelper.getInstance().getDemoFeaturesJson();

        Map<String, Feature<?>> featuresMap = TransformationUtil.transformFeatures(features);

        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        when(featuresRepository.getParsedFeatures()).thenReturn(featuresMap);

        GBContext context = GBContext
                .builder()
                .featuresJson(features)
                .attributesJson(attributes)
                .build();
        GrowthBook subject = new GrowthBook(context, featuresRepository);

        Float result = subject.getFeatureValue(featureKey, 0.00f);

        assertEquals(10.99f, result);
    }

    @Test
    void test_getFeatureValue_asObject() {
        String featureKey = "papercups-config";
        String attributes = "{ \"user\": \"standard\" }";
        String features = TestCasesJsonHelper.getInstance().getDemoFeaturesJson();

        GBContext context = GBContext
                .builder()
                .featuresJson(features)
                .attributesJson(attributes)
                .build();

        Map<String, Feature<?>> featuresMap = TransformationUtil.transformFeatures(features);

        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        when(featuresRepository.getParsedFeatures()).thenReturn(featuresMap);

        GrowthBook subject = new GrowthBook(context, featuresRepository);

        Object defaultConfig = new PaperCupsConfig("abc123", "My Chat", true);
        Object resultObject = subject.getFeatureValue(featureKey, defaultConfig);
        // showing that this object can be deserialized manually
        String resultConfigString = jsonUtils.gson.toJson(resultObject);
        PaperCupsConfig resultConfig = jsonUtils.gson.fromJson(resultConfigString, PaperCupsConfig.class);

        assertNotNull(resultObject);
        assertNotNull(resultConfig);
        assertEquals("Welcome to GrowthBook Cloud", resultConfig.title);
    }

    @Test
    void test_getFeatureValue_asGsonDeserializable() {
        String featureKey = "papercups-config";
        String attributes = "{ \"user\": \"standard\" }";
        String features = TestCasesJsonHelper.getInstance().getDemoFeaturesJson();

        Map<String, Feature<?>> featuresMap = TransformationUtil.transformFeatures(features);

        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        when(featuresRepository.getParsedFeatures()).thenReturn(featuresMap);

        GBContext context = GBContext
                .builder()
                .featuresJson(features)
                .attributesJson(attributes)
                .build();
        GrowthBook subject = new GrowthBook(context, featuresRepository);

        PaperCupsConfig defaultConfig = new PaperCupsConfig("abc123", "My Chat", true);
        PaperCupsConfig resultConfig = subject.getFeatureValue(featureKey, defaultConfig, PaperCupsConfig.class);

        assertNotNull(resultConfig);
        assertEquals("Welcome to GrowthBook Cloud", resultConfig.title);
    }

    @Test
    void test_getFeatureValue_returnsFeatureValueFromEncryptedFeatures() throws DecryptionUtils.DecryptionException {
        String encryptedFeaturesJson = "7rvPA94JEsqRo9yPZsdsXg==.bJ8vtYvX+ur3cEUFVkYo1OyWb98oLnMlpeoO0Hs4YPc0EVb7oKX4KNz+Yt6GUMBsieXqtL7oaYzX+kMayZEtV+3bhyDYnS9QBrvalnfxbLExjtnsy8g0pPQHU/P/DPIzO0F+pphcahRfi+3AMTnIreqvkqrcX+MyOwHN56lqEs23Vp4Rsq2qDow/LZmn5kpwMNhMY0DBq7jC+lh2Oyly0g==";
        String encryptionKey = "BhB1wORFmZLTDjbvstvS8w==";
        String sampleUserAttributes = "{\"country\": \"mexico\", \"device\": \"android\"}";

        GBContext context = GBContext
                .builder()
                .attributesJson(sampleUserAttributes)
                .featuresJson(encryptedFeaturesJson)
                .encryptionKey(encryptionKey)
                .build();

        String decryptedFeaturesJson = DecryptionUtils.decrypt(encryptedFeaturesJson, encryptionKey);

        Map<String, Feature<?>> featuresMap = TransformationUtil.transformFeatures(decryptedFeaturesJson);

        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        when(featuresRepository.getParsedFeatures()).thenReturn(featuresMap);

        GrowthBook subject = new GrowthBook(context, featuresRepository);

        String result = subject.getFeatureValue("greeting", "hello");
        String expected = "hola";

        assertEquals(expected, result);
    }

    @Test
    void test_evaluateCondition_callsConditionEvaluator() {
        ConditionEvaluator mockConditionEvaluator = mock(ConditionEvaluator.class);
        ExperimentEvaluator mockExperimentEvaluator = mock(ExperimentEvaluator.class);
        FeatureEvaluator mockFeatureEvaluator = mock(FeatureEvaluator.class);
        GBContext context = GBContext.builder().build();

        String attrJsonStr = "{ id: 1 }";
        String conditionJsonStr = "{}";
        String savedGroups = "{}";
        JsonObject attributesJson = GrowthBookJsonUtils.getInstance().gson.fromJson(attrJsonStr, JsonObject.class);
        JsonObject conditionJson = GrowthBookJsonUtils.getInstance().gson.fromJson(conditionJsonStr, JsonObject.class);
        JsonObject savedGroupsJson = GrowthBookJsonUtils.getInstance().gson.fromJson(savedGroups, JsonObject.class);
        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        GrowthBook subject = new GrowthBook(context, mockFeatureEvaluator, mockConditionEvaluator, mockExperimentEvaluator, featuresRepository);
        context.setSavedGroups(savedGroupsJson);

        subject.evaluateCondition(attrJsonStr, conditionJsonStr);

        verify(mockConditionEvaluator).evaluateCondition(attributesJson, conditionJson, savedGroupsJson);
    }

    @Test
    void test_evaluateCondition_returnsFalseIfWrongShape() {
        String attributes = "{\"name\": \"world\"}";
        String condition = "[\"$not\": { \"name\": \"hello\" }]";

        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        GrowthBook growthBook = new GrowthBook(featuresRepository);
        assertFalse(growthBook.evaluateCondition(attributes, condition));
    }

    @Test
    void test_destroyClearsCallbacks() {
        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        GrowthBook subject = new GrowthBook(featuresRepository);
        ExperimentRunCallback mockCallback1 = mock(ExperimentRunCallback.class);
        ExperimentRunCallback mockCallback2 = mock(ExperimentRunCallback.class);
        Experiment<String> mockExperiment = Experiment.<String>builder().build();

        // Add callbacks
        subject.subscribe(mockCallback1);
        subject.subscribe(mockCallback2);

        // Perform action that results in the initial call
        subject.run(mockExperiment);

        // Perform action that clears callbacks
        subject.destroy();

        // Run another experiment
        ExperimentResult<String> result2 = subject.run(mockExperiment);

        // Verify callbacks are only called once (for the initial invocation)
        verify(mockCallback1, times(1)).onRun(mockExperiment, result2);
        verify(mockCallback2, times(1)).onRun(mockExperiment, result2);
    }

    // region getFeatureValue

    @Test
    void test_getFeatureValue_string_nullValueUsesDefaultValue() {
        String featureKey = "some-unknown-feature-key";
        String features = "{}";
        String attributes = "{}";

        GBContext context = GBContext
                .builder()
                .featuresJson(features)
                .attributesJson(attributes)
                .build();
        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        GrowthBook subject = new GrowthBook(context, featuresRepository);

        String result = subject.getFeatureValue(featureKey, "my fallback value");

        assertNotNull(result);
        assertEquals("my fallback value", result);
    }

    @Test
    void test_getFeatureValue_float_nullValueUsesDefaultValue() {
        String featureKey = "some-unknown-feature-key";
        String features = "{}";
        String attributes = "{}";

        GBContext context = GBContext
                .builder()
                .featuresJson(features)
                .attributesJson(attributes)
                .build();
        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        GrowthBook subject = new GrowthBook(context, featuresRepository);

        Float result = subject.getFeatureValue(featureKey, 10.0f);

        assertNotNull(result);
        assertEquals(10.0f, result);
    }

    @Test
    void test_getFeatureValue_integer_nullValueUsesDefaultValue() {
        String featureKey = "some-unknown-feature-key";
        String features = "{}";
        String attributes = "{}";

        GBContext context = GBContext
                .builder()
                .featuresJson(features)
                .attributesJson(attributes)
                .build();
        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        GrowthBook subject = new GrowthBook(context, featuresRepository);

        Integer result = subject.getFeatureValue(featureKey, 99);

        assertNotNull(result);
        assertEquals(99, result);
    }

    @Test
    void test_getFeatureValue_double_nullValueUsesDefaultValue() {
        String featureKey = "some-unknown-feature-key";
        String features = "{}";
        String attributes = "{}";

        GBContext context = GBContext
                .builder()
                .featuresJson(features)
                .attributesJson(attributes)
                .build();
        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        GrowthBook subject = new GrowthBook(context, featuresRepository);

        Double result = subject.getFeatureValue(featureKey, Double.valueOf(101));

        assertNotNull(result);
        assertEquals(Double.valueOf(101), result);
    }

    @Test
    void test_getFeatureValue_gsonDeserializable_nullValueUsesDefaultValue() {
        String featureKey = "some-unknown-feature-key";
        String features = "{}";
        String attributes = "{}";

        GBContext context = GBContext
                .builder()
                .featuresJson(features)
                .attributesJson(attributes)
                .build();
        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        GrowthBook subject = new GrowthBook(context, featuresRepository);

        PaperCupsConfig defaultConfig = new PaperCupsConfig("abc123", "My Chat", true);
        PaperCupsConfig result = subject.getFeatureValue(featureKey, defaultConfig, PaperCupsConfig.class);

        assertNotNull(result);
        assertEquals(defaultConfig, result);
    }

    // endregion getFeatureValue


    // region URL -> force features

    @Test
    void test_withUrl_getFeatureValue_forcesBooleanValue_true() {
        String featuresJson = "{\"status\":200,\"features\":{\"banner_text\":{\"defaultValue\":\"Welcome to Acme Donuts!\",\"rules\":[{\"condition\":{\"country\":\"france\"},\"force\":\"Bienvenue au Beignets Acme !\"},{\"condition\":{\"country\":\"spain\"},\"force\":\"¡Bienvenidos y bienvenidas a Donas Acme!\"}]},\"dark_mode\":{\"defaultValue\":false,\"rules\":[{\"condition\":{\"loggedIn\":true},\"force\":true,\"coverage\":0.5,\"hashAttribute\":\"id\"}]},\"donut_price\":{\"defaultValue\":2.5,\"rules\":[{\"condition\":{\"employee\":true},\"force\":0}]},\"meal_overrides_gluten_free\":{\"defaultValue\":{\"meal_type\":\"standard\",\"dessert\":\"Strawberry Cheesecake\"},\"rules\":[{\"condition\":{\"dietaryRestrictions\":{\"$elemMatch\":{\"$eq\":\"gluten_free\"}}},\"force\":{\"meal_type\":\"gf\",\"dessert\":\"French Vanilla Ice Cream\"}}]}},\"dateUpdated\":\"2023-01-11T00:26:01.745Z\"}";
        String attributes = "{}";
        String url = "http://localhost:8080/url-feature-force?gb~meal_overrides_gluten_free=%7B%22meal_type%22%3A%20%22gf%22%2C%20%22dessert%22%3A%20%22French%20Vanilla%20Ice%20Cream%22%7D&gb~dark_mode=true&gb~donut_price=3.33&gb~banner_text=Hello%2C%20everyone!%20I%20hope%20you%20are%20all%20doing%20well!";

        GBContext context = GBContext
                .builder()
                .featuresJson(featuresJson)
                .attributesJson(attributes)
                .url(url)
                .allowUrlOverrides(true)
                .build();
        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        GrowthBook subject = new GrowthBook(context, featuresRepository);

        Boolean result = subject.getFeatureValue("dark_mode", false);

        assertEquals(true, result);
    }

    @Test
    void test_withUrl_getFeatureValue_forcesBooleanValue_on() {
        String featuresJson = "{\"status\":200,\"features\":{\"banner_text\":{\"defaultValue\":\"Welcome to Acme Donuts!\",\"rules\":[{\"condition\":{\"country\":\"france\"},\"force\":\"Bienvenue au Beignets Acme !\"},{\"condition\":{\"country\":\"spain\"},\"force\":\"¡Bienvenidos y bienvenidas a Donas Acme!\"}]},\"dark_mode\":{\"defaultValue\":false,\"rules\":[{\"condition\":{\"loggedIn\":true},\"force\":true,\"coverage\":0.5,\"hashAttribute\":\"id\"}]},\"donut_price\":{\"defaultValue\":2.5,\"rules\":[{\"condition\":{\"employee\":true},\"force\":0}]},\"meal_overrides_gluten_free\":{\"defaultValue\":{\"meal_type\":\"standard\",\"dessert\":\"Strawberry Cheesecake\"},\"rules\":[{\"condition\":{\"dietaryRestrictions\":{\"$elemMatch\":{\"$eq\":\"gluten_free\"}}},\"force\":{\"meal_type\":\"gf\",\"dessert\":\"French Vanilla Ice Cream\"}}]}},\"dateUpdated\":\"2023-01-11T00:26:01.745Z\"}";
        String attributes = "{}";
        String url = "http://localhost:8080/url-feature-force?gb~meal_overrides_gluten_free=%7B%22meal_type%22%3A%20%22gf%22%2C%20%22dessert%22%3A%20%22French%20Vanilla%20Ice%20Cream%22%7D&gb~dark_mode=on&gb~donut_price=3.33&gb~banner_text=Hello%2C%20everyone!%20I%20hope%20you%20are%20all%20doing%20well!";

        GBContext context = GBContext
                .builder()
                .featuresJson(featuresJson)
                .attributesJson(attributes)
                .url(url)
                .allowUrlOverrides(true)
                .build();
        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        GrowthBook subject = new GrowthBook(context, featuresRepository);

        Boolean result = subject.getFeatureValue("dark_mode", false);

        assertEquals(true, result);
    }

    @Test
    void test_withUrl_getFeatureValue_forcesBooleanValue_1() {
        String featuresJson = "{\"status\":200,\"features\":{\"banner_text\":{\"defaultValue\":\"Welcome to Acme Donuts!\",\"rules\":[{\"condition\":{\"country\":\"france\"},\"force\":\"Bienvenue au Beignets Acme !\"},{\"condition\":{\"country\":\"spain\"},\"force\":\"¡Bienvenidos y bienvenidas a Donas Acme!\"}]},\"dark_mode\":{\"defaultValue\":false,\"rules\":[{\"condition\":{\"loggedIn\":true},\"force\":true,\"coverage\":0.5,\"hashAttribute\":\"id\"}]},\"donut_price\":{\"defaultValue\":2.5,\"rules\":[{\"condition\":{\"employee\":true},\"force\":0}]},\"meal_overrides_gluten_free\":{\"defaultValue\":{\"meal_type\":\"standard\",\"dessert\":\"Strawberry Cheesecake\"},\"rules\":[{\"condition\":{\"dietaryRestrictions\":{\"$elemMatch\":{\"$eq\":\"gluten_free\"}}},\"force\":{\"meal_type\":\"gf\",\"dessert\":\"French Vanilla Ice Cream\"}}]}},\"dateUpdated\":\"2023-01-11T00:26:01.745Z\"}";
        String attributes = "{}";
        String url = "http://localhost:8080/url-feature-force?gb~meal_overrides_gluten_free=%7B%22meal_type%22%3A%20%22gf%22%2C%20%22dessert%22%3A%20%22French%20Vanilla%20Ice%20Cream%22%7D&gb~dark_mode=1&gb~donut_price=3.33&gb~banner_text=Hello%2C%20everyone!%20I%20hope%20you%20are%20all%20doing%20well!";

        GBContext context = GBContext
                .builder()
                .featuresJson(featuresJson)
                .attributesJson(attributes)
                .url(url)
                .allowUrlOverrides(true)
                .build();
        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        GrowthBook subject = new GrowthBook(context, featuresRepository);

        Boolean result = subject.getFeatureValue("dark_mode", false);

        assertEquals(true, result);
    }

    @Test
    void test_withUrl_getFeatureValue_forcesBooleanValue_false() {
        String featuresJson = "{\"status\":200,\"features\":{\"banner_text\":{\"defaultValue\":\"Welcome to Acme Donuts!\",\"rules\":[{\"condition\":{\"country\":\"france\"},\"force\":\"Bienvenue au Beignets Acme !\"},{\"condition\":{\"country\":\"spain\"},\"force\":\"¡Bienvenidos y bienvenidas a Donas Acme!\"}]},\"dark_mode\":{\"defaultValue\":false,\"rules\":[{\"condition\":{\"loggedIn\":true},\"force\":true,\"coverage\":0.5,\"hashAttribute\":\"id\"}]},\"donut_price\":{\"defaultValue\":2.5,\"rules\":[{\"condition\":{\"employee\":true},\"force\":0}]},\"meal_overrides_gluten_free\":{\"defaultValue\":{\"meal_type\":\"standard\",\"dessert\":\"Strawberry Cheesecake\"},\"rules\":[{\"condition\":{\"dietaryRestrictions\":{\"$elemMatch\":{\"$eq\":\"gluten_free\"}}},\"force\":{\"meal_type\":\"gf\",\"dessert\":\"French Vanilla Ice Cream\"}}]}},\"dateUpdated\":\"2023-01-11T00:26:01.745Z\"}";
        String attributes = "{}";
        String url = "http://localhost:8080/url-feature-force?gb~meal_overrides_gluten_free=%7B%22meal_type%22%3A%20%22gf%22%2C%20%22dessert%22%3A%20%22French%20Vanilla%20Ice%20Cream%22%7D&gb~dark_mode=false&gb~donut_price=3.33&gb~banner_text=Hello%2C%20everyone!%20I%20hope%20you%20are%20all%20doing%20well!";

        GBContext context = GBContext
                .builder()
                .featuresJson(featuresJson)
                .attributesJson(attributes)
                .url(url)
                .allowUrlOverrides(true)
                .build();
        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        GrowthBook subject = new GrowthBook(context, featuresRepository);

        Boolean result = subject.getFeatureValue("dark_mode", true);

        assertEquals(false, result);
    }

    @Test
    void test_withUrl_getFeatureValue_forcesBooleanValue_off() {
        String featuresJson = "{\"status\":200,\"features\":{\"banner_text\":{\"defaultValue\":\"Welcome to Acme Donuts!\",\"rules\":[{\"condition\":{\"country\":\"france\"},\"force\":\"Bienvenue au Beignets Acme !\"},{\"condition\":{\"country\":\"spain\"},\"force\":\"¡Bienvenidos y bienvenidas a Donas Acme!\"}]},\"dark_mode\":{\"defaultValue\":false,\"rules\":[{\"condition\":{\"loggedIn\":true},\"force\":true,\"coverage\":0.5,\"hashAttribute\":\"id\"}]},\"donut_price\":{\"defaultValue\":2.5,\"rules\":[{\"condition\":{\"employee\":true},\"force\":0}]},\"meal_overrides_gluten_free\":{\"defaultValue\":{\"meal_type\":\"standard\",\"dessert\":\"Strawberry Cheesecake\"},\"rules\":[{\"condition\":{\"dietaryRestrictions\":{\"$elemMatch\":{\"$eq\":\"gluten_free\"}}},\"force\":{\"meal_type\":\"gf\",\"dessert\":\"French Vanilla Ice Cream\"}}]}},\"dateUpdated\":\"2023-01-11T00:26:01.745Z\"}";
        String attributes = "{}";
        String url = "http://localhost:8080/url-feature-force?gb~meal_overrides_gluten_free=%7B%22meal_type%22%3A%20%22gf%22%2C%20%22dessert%22%3A%20%22French%20Vanilla%20Ice%20Cream%22%7D&gb~dark_mode=off&gb~donut_price=3.33&gb~banner_text=Hello%2C%20everyone!%20I%20hope%20you%20are%20all%20doing%20well!";

        GBContext context = GBContext
                .builder()
                .featuresJson(featuresJson)
                .attributesJson(attributes)
                .url(url)
                .allowUrlOverrides(true)
                .build();
        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        GrowthBook subject = new GrowthBook(context, featuresRepository);

        Boolean result = subject.getFeatureValue("dark_mode", true);

        assertEquals(false, result);
    }

    @Test
    void test_withUrl_getFeatureValue_forcesBooleanValue_0() {
        String featuresJson = "{\"status\":200,\"features\":{\"banner_text\":{\"defaultValue\":\"Welcome to Acme Donuts!\",\"rules\":[{\"condition\":{\"country\":\"france\"},\"force\":\"Bienvenue au Beignets Acme !\"},{\"condition\":{\"country\":\"spain\"},\"force\":\"¡Bienvenidos y bienvenidas a Donas Acme!\"}]},\"dark_mode\":{\"defaultValue\":false,\"rules\":[{\"condition\":{\"loggedIn\":true},\"force\":true,\"coverage\":0.5,\"hashAttribute\":\"id\"}]},\"donut_price\":{\"defaultValue\":2.5,\"rules\":[{\"condition\":{\"employee\":true},\"force\":0}]},\"meal_overrides_gluten_free\":{\"defaultValue\":{\"meal_type\":\"standard\",\"dessert\":\"Strawberry Cheesecake\"},\"rules\":[{\"condition\":{\"dietaryRestrictions\":{\"$elemMatch\":{\"$eq\":\"gluten_free\"}}},\"force\":{\"meal_type\":\"gf\",\"dessert\":\"French Vanilla Ice Cream\"}}]}},\"dateUpdated\":\"2023-01-11T00:26:01.745Z\"}";
        String attributes = "{}";
        String url = "http://localhost:8080/url-feature-force?gb~meal_overrides_gluten_free=%7B%22meal_type%22%3A%20%22gf%22%2C%20%22dessert%22%3A%20%22French%20Vanilla%20Ice%20Cream%22%7D&gb~dark_mode=0&gb~donut_price=3.33&gb~banner_text=Hello%2C%20everyone!%20I%20hope%20you%20are%20all%20doing%20well!";

        GBContext context = GBContext
                .builder()
                .featuresJson(featuresJson)
                .attributesJson(attributes)
                .url(url)
                .allowUrlOverrides(true)
                .build();
        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        GrowthBook subject = new GrowthBook(context, featuresRepository);

        Boolean result = subject.getFeatureValue("dark_mode", true);

        assertEquals(false, result);
    }

    @Test
    void test_withUrl_getFeatureValue_forcesIntegerValue() {
        String featuresJson = "{\"status\":200,\"features\":{\"banner_text\":{\"defaultValue\":\"Welcome to Acme Donuts!\",\"rules\":[{\"condition\":{\"country\":\"france\"},\"force\":\"Bienvenue au Beignets Acme !\"},{\"condition\":{\"country\":\"spain\"},\"force\":\"¡Bienvenidos y bienvenidas a Donas Acme!\"}]},\"dark_mode\":{\"defaultValue\":false,\"rules\":[{\"condition\":{\"loggedIn\":true},\"force\":true,\"coverage\":0.5,\"hashAttribute\":\"id\"}]},\"donut_price\":{\"defaultValue\":2.5,\"rules\":[{\"condition\":{\"employee\":true},\"force\":0}]},\"meal_overrides_gluten_free\":{\"defaultValue\":{\"meal_type\":\"standard\",\"dessert\":\"Strawberry Cheesecake\"},\"rules\":[{\"condition\":{\"dietaryRestrictions\":{\"$elemMatch\":{\"$eq\":\"gluten_free\"}}},\"force\":{\"meal_type\":\"gf\",\"dessert\":\"French Vanilla Ice Cream\"}}]}},\"dateUpdated\":\"2023-01-11T00:26:01.745Z\"}";
        String attributes = "{}";
        String url = "http://localhost:8080/url-feature-force?gb~meal_overrides_gluten_free=%7B%22meal_type%22%3A%20%22gf%22%2C%20%22dessert%22%3A%20%22French%20Vanilla%20Ice%20Cream%22%7D&gb~dark_mode=true&gb~donut_price=2&gb~banner_text=Hello%2C%20everyone!%20I%20hope%20you%20are%20all%20doing%20well!";

        GBContext context = GBContext
                .builder()
                .featuresJson(featuresJson)
                .attributesJson(attributes)
                .url(url)
                .allowUrlOverrides(true)
                .build();
        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        GrowthBook subject = new GrowthBook(context, featuresRepository);

        Integer result = subject.getFeatureValue("donut_price", 999);

        assertEquals(2, result);
    }

    @Test
    void test_withUrl_getFeatureValue_forcesFloatValue() {
        String featuresJson = "{\"status\":200,\"features\":{\"banner_text\":{\"defaultValue\":\"Welcome to Acme Donuts!\",\"rules\":[{\"condition\":{\"country\":\"france\"},\"force\":\"Bienvenue au Beignets Acme !\"},{\"condition\":{\"country\":\"spain\"},\"force\":\"¡Bienvenidos y bienvenidas a Donas Acme!\"}]},\"dark_mode\":{\"defaultValue\":false,\"rules\":[{\"condition\":{\"loggedIn\":true},\"force\":true,\"coverage\":0.5,\"hashAttribute\":\"id\"}]},\"donut_price\":{\"defaultValue\":2.5,\"rules\":[{\"condition\":{\"employee\":true},\"force\":0}]},\"meal_overrides_gluten_free\":{\"defaultValue\":{\"meal_type\":\"standard\",\"dessert\":\"Strawberry Cheesecake\"},\"rules\":[{\"condition\":{\"dietaryRestrictions\":{\"$elemMatch\":{\"$eq\":\"gluten_free\"}}},\"force\":{\"meal_type\":\"gf\",\"dessert\":\"French Vanilla Ice Cream\"}}]}},\"dateUpdated\":\"2023-01-11T00:26:01.745Z\"}";
        String attributes = "{}";
        String url = "http://localhost:8080/url-feature-force?gb~meal_overrides_gluten_free=%7B%22meal_type%22%3A%20%22gf%22%2C%20%22dessert%22%3A%20%22French%20Vanilla%20Ice%20Cream%22%7D&gb~dark_mode=true&gb~donut_price=3.33&gb~banner_text=Hello%2C%20everyone!%20I%20hope%20you%20are%20all%20doing%20well!";
        GBContext context = GBContext
                .builder()
                .featuresJson(featuresJson)
                .attributesJson(attributes)
                .url(url)
                .allowUrlOverrides(true)
                .build();
        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        GrowthBook subject = new GrowthBook(context, featuresRepository);

        Float result = subject.getFeatureValue("donut_price", 9999f);

        assertEquals(3.33f, result);
    }

    @Test
    void test_withUrl_getFeatureValue_forcesStringValue() {
        String featuresJson = "{\"status\":200,\"features\":{\"banner_text\":{\"defaultValue\":\"Welcome to Acme Donuts!\",\"rules\":[{\"condition\":{\"country\":\"france\"},\"force\":\"Bienvenue au Beignets Acme !\"},{\"condition\":{\"country\":\"spain\"},\"force\":\"¡Bienvenidos y bienvenidas a Donas Acme!\"}]},\"dark_mode\":{\"defaultValue\":false,\"rules\":[{\"condition\":{\"loggedIn\":true},\"force\":true,\"coverage\":0.5,\"hashAttribute\":\"id\"}]},\"donut_price\":{\"defaultValue\":2.5,\"rules\":[{\"condition\":{\"employee\":true},\"force\":0}]},\"meal_overrides_gluten_free\":{\"defaultValue\":{\"meal_type\":\"standard\",\"dessert\":\"Strawberry Cheesecake\"},\"rules\":[{\"condition\":{\"dietaryRestrictions\":{\"$elemMatch\":{\"$eq\":\"gluten_free\"}}},\"force\":{\"meal_type\":\"gf\",\"dessert\":\"French Vanilla Ice Cream\"}}]}},\"dateUpdated\":\"2023-01-11T00:26:01.745Z\"}";
        String attributes = "{}";
        String url = "http://localhost:8080/url-feature-force?gb~meal_overrides_gluten_free=%7B%22meal_type%22%3A%20%22gf%22%2C%20%22dessert%22%3A%20%22French%20Vanilla%20Ice%20Cream%22%7D&gb~dark_mode=true&gb~donut_price=3.33&gb~banner_text=Hello%2C%20everyone!%20I%20hope%20you%20are%20all%20doing%20well!";
        GBContext context = GBContext
                .builder()
                .featuresJson(featuresJson)
                .attributesJson(attributes)
                .url(url)
                .allowUrlOverrides(true)
                .build();
        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        GrowthBook subject = new GrowthBook(context, featuresRepository);

        String result = subject.getFeatureValue("banner_text", "???");
        assertEquals("Hello, everyone! I hope you are all doing well!", result);
    }

    // JSON example -> use built-in Gson support
    @Test
    void test_withUrl_getFeatureValue_forcesJsonValue_Gson() {
        String featuresJson = "{\"status\":200,\"features\":{\"banner_text\":{\"defaultValue\":\"Welcome to Acme Donuts!\",\"rules\":[{\"condition\":{\"country\":\"france\"},\"force\":\"Bienvenue au Beignets Acme !\"},{\"condition\":{\"country\":\"spain\"},\"force\":\"¡Bienvenidos y bienvenidas a Donas Acme!\"}]},\"dark_mode\":{\"defaultValue\":false,\"rules\":[{\"condition\":{\"loggedIn\":true},\"force\":true,\"coverage\":0.5,\"hashAttribute\":\"id\"}]},\"donut_price\":{\"defaultValue\":2.5,\"rules\":[{\"condition\":{\"employee\":true},\"force\":0}]},\"meal_overrides_gluten_free\":{\"defaultValue\":{\"meal_type\":\"standard\",\"dessert\":\"Strawberry Cheesecake\"},\"rules\":[{\"condition\":{\"dietaryRestrictions\":{\"$elemMatch\":{\"$eq\":\"gluten_free\"}}},\"force\":{\"meal_type\":\"gf\",\"dessert\":\"French Vanilla Ice Cream\"}}]}},\"dateUpdated\":\"2023-01-11T00:26:01.745Z\"}";
        String attributes = "{}";
        String url = "http://localhost:8080/url-feature-force?gb~meal_overrides_gluten_free=%7B%22meal_type%22%3A%20%22gf%22%2C%20%22dessert%22%3A%20%22French%20Vanilla%20Ice%20Cream%22%7D&gb~dark_mode=true&gb~donut_price=3.33&gb~banner_text=Hello%2C%20everyone!%20I%20hope%20you%20are%20all%20doing%20well!";

        GBContext context = GBContext
                .builder()
                .featuresJson(featuresJson)
                .attributesJson(attributes)
                .url(url)
                .allowUrlOverrides(true)
                .build();
        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        GrowthBook subject = new GrowthBook(context, featuresRepository);

        MealOrder emptyMealOrder = new MealOrder(MealType.STANDARD, "Donut");

        MealOrder result = (MealOrder) subject.getFeatureValue("meal_overrides_gluten_free", emptyMealOrder);

        assertEquals(MealType.GLUTEN_FREE, result.getMealType());
        assertEquals("French Vanilla Ice Cream", result.getDessert());
    }

    // JSON example -> use your own JSON deserialization implementation
    @Test
    void test_withUrl_getFeatureValue_jsonValueFromString() {
        String featuresJson = "{\"status\":200,\"features\":{\"banner_text\":{\"defaultValue\":\"Welcome to Acme Donuts!\",\"rules\":[{\"condition\":{\"country\":\"france\"},\"force\":\"Bienvenue au Beignets Acme !\"},{\"condition\":{\"country\":\"spain\"},\"force\":\"¡Bienvenidos y bienvenidas a Donas Acme!\"}]},\"dark_mode\":{\"defaultValue\":false,\"rules\":[{\"condition\":{\"loggedIn\":true},\"force\":true,\"coverage\":0.5,\"hashAttribute\":\"id\"}]},\"donut_price\":{\"defaultValue\":2.5,\"rules\":[{\"condition\":{\"employee\":true},\"force\":0}]},\"meal_overrides_gluten_free\":{\"defaultValue\":{\"meal_type\":\"standard\",\"dessert\":\"Strawberry Cheesecake\"},\"rules\":[{\"condition\":{\"dietaryRestrictions\":{\"$elemMatch\":{\"$eq\":\"gluten_free\"}}},\"force\":{\"meal_type\":\"gf\",\"dessert\":\"French Vanilla Ice Cream\"}}]}},\"dateUpdated\":\"2023-01-11T00:26:01.745Z\"}";
        String attributes = "{}";
        String url = "http://localhost:8080/url-feature-force?gb~meal_overrides_gluten_free=%7B%22meal_type%22%3A%20%22gf%22%2C%20%22dessert%22%3A%20%22French%20Vanilla%20Ice%20Cream%22%7D&gb~dark_mode=true&gb~donut_price=3.33&gb~banner_text=Hello%2C%20everyone!%20I%20hope%20you%20are%20all%20doing%20well!";

        GBContext context = GBContext
                .builder()
                .featuresJson(featuresJson)
                .attributesJson(attributes)
                .url(url)
                .allowUrlOverrides(true)
                .build();
        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        GrowthBook subject = new GrowthBook(context, featuresRepository);

        String resultAsString = subject.getFeatureValue("meal_overrides_gluten_free", "{\"meal_type\": \"standard\", \"dessert\": \"Donut\"}");
        // Custom deserialization example
        MealOrder result = jsonUtils.gson.fromJson(resultAsString, MealOrder.class);

        assertEquals(MealType.GLUTEN_FREE, result.getMealType());
        assertEquals("French Vanilla Ice Cream", result.getDessert());
    }

    @Test
    void test_withUrl_getFeatureValue_withForcedJsonValue_returnsDefaultValueWhenInvalid() {
        String featuresJson = "{\"status\":200,\"features\":{\"banner_text\":{\"defaultValue\":\"Welcome to Acme Donuts!\",\"rules\":[{\"condition\":{\"country\":\"france\"},\"force\":\"Bienvenue au Beignets Acme !\"},{\"condition\":{\"country\":\"spain\"},\"force\":\"¡Bienvenidos y bienvenidas a Donas Acme!\"}]},\"dark_mode\":{\"defaultValue\":false,\"rules\":[{\"condition\":{\"loggedIn\":true},\"force\":true,\"coverage\":0.5,\"hashAttribute\":\"id\"}]},\"donut_price\":{\"defaultValue\":2.5,\"rules\":[{\"condition\":{\"employee\":true},\"force\":0}]},\"meal_overrides_gluten_free\":{\"defaultValue\":{\"meal_type\":\"standard\",\"dessert\":\"Strawberry Cheesecake\"},\"rules\":[{\"condition\":{\"dietaryRestrictions\":{\"$elemMatch\":{\"$eq\":\"gluten_free\"}}},\"force\":{\"meal_type\":\"gf\",\"dessert\":\"French Vanilla Ice Cream\"}}]}},\"dateUpdated\":\"2023-01-11T00:26:01.745Z\"}";
        String attributes = "{}";
        String url = "http://localhost:8080/url-feature-force?gb~meal_overrides_gluten_free=%7B%22meal_type%22%3A%20%22gf%22%2C%20%22dessert%22%3A%20%22French%20Vanilla%20Ice%20Cream%22%7D&gb~dark_mode=true&gb~donut_price=3.33&gb~banner_text=Hello%2C%20everyone!%20I%20hope%20you%20are%20all%20doing%20well!";

        GBContext context = GBContext
                .builder()
                .featuresJson(featuresJson)
                .attributesJson(attributes)
                .url(url)
                .allowUrlOverrides(true)
                .build();
        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        GrowthBook subject = new GrowthBook(context, featuresRepository);

        // We try to deserialize an unsupported class from the URL, but it cannot deserialize properly, so we get the default value
        GBTestingFoo defaultFoo = new GBTestingFoo();
        GBTestingFoo result = (GBTestingFoo) subject.getFeatureValue("meal_overrides_gluten_free", defaultFoo);

        assertEquals(defaultFoo, result);
    }

    enum MealType {
        @SerializedName("standard")
        STANDARD("Standard Meal"),

        @SerializedName("gf")
        GLUTEN_FREE("Gluten-Free Meal"),
        ;

        private final String rawValue;

        MealType(String rawValue) {
            this.rawValue = rawValue;
        }

        @Override
        public String toString() {
            return this.rawValue;
        }
    }

    @Getter
    static class MealOrder {
        @SerializedName("meal_type")
        MealType mealType;

        @SerializedName("dessert")
        String dessert;

        public MealOrder(MealType mealType, String dessert) {
            this.mealType = mealType;
            this.dessert = dessert;
        }
    }

    static class GBTestingFoo {
        @SerializedName("foo")
        String foo = "FOO!";

        @Override
        public boolean equals(Object obj) {
            if (obj instanceof GBTestingFoo) {
                return Objects.equals(((GBTestingFoo) obj).foo, this.foo);
            }

            return false;
        }
    }


    // region URL -> force features -> evaluateFeature

    @Test
    void test_withUrl_evaluateFeature_forcesBooleanValue() {
        String featuresJson = "{\"status\":200,\"features\":{\"banner_text\":{\"defaultValue\":\"Welcome to Acme Donuts!\",\"rules\":[{\"condition\":{\"country\":\"france\"},\"force\":\"Bienvenue au Beignets Acme !\"},{\"condition\":{\"country\":\"spain\"},\"force\":\"¡Bienvenidos y bienvenidas a Donas Acme!\"}]},\"dark_mode\":{\"defaultValue\":false,\"rules\":[{\"condition\":{\"loggedIn\":true},\"force\":true,\"coverage\":0.5,\"hashAttribute\":\"id\"}]},\"donut_price\":{\"defaultValue\":2.5,\"rules\":[{\"condition\":{\"employee\":true},\"force\":0}]},\"meal_overrides_gluten_free\":{\"defaultValue\":{\"meal_type\":\"standard\",\"dessert\":\"Strawberry Cheesecake\"},\"rules\":[{\"condition\":{\"dietaryRestrictions\":{\"$elemMatch\":{\"$eq\":\"gluten_free\"}}},\"force\":{\"meal_type\":\"gf\",\"dessert\":\"French Vanilla Ice Cream\"}}]}},\"dateUpdated\":\"2023-01-11T00:26:01.745Z\"}";
        String attributes = "{}";
        String url = "http://localhost:8080/url-feature-force?gb~meal_overrides_gluten_free=%7B%22meal_type%22%3A%20%22gf%22%2C%20%22dessert%22%3A%20%22French%20Vanilla%20Ice%20Cream%22%7D&gb~dark_mode=true&gb~donut_price=3.33&gb~banner_text=Hello%2C%20everyone!%20I%20hope%20you%20are%20all%20doing%20well!";
        GBContext context = GBContext
                .builder()
                .featuresJson(featuresJson)
                .attributesJson(attributes)
                .url(url)
                .allowUrlOverrides(true)
                .build();
        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        GrowthBook subject = new GrowthBook(context, featuresRepository);

        FeatureResult<Boolean> result = subject.evalFeature("dark_mode", Boolean.class);

        if (result != null) {
            assertEquals(true, result.getValue());
            assertEquals(FeatureResultSource.URL_OVERRIDE, result.getSource());
        }
    }

    @Test
    void test_withUrl_evaluateFeature_forcesStringValue() {
        String featuresJson = "{\"status\":200,\"features\":{\"banner_text\":{\"defaultValue\":\"Welcome to Acme Donuts!\",\"rules\":[{\"condition\":{\"country\":\"france\"},\"force\":\"Bienvenue au Beignets Acme !\"},{\"condition\":{\"country\":\"spain\"},\"force\":\"¡Bienvenidos y bienvenidas a Donas Acme!\"}]},\"dark_mode\":{\"defaultValue\":false,\"rules\":[{\"condition\":{\"loggedIn\":true},\"force\":true,\"coverage\":0.5,\"hashAttribute\":\"id\"}]},\"donut_price\":{\"defaultValue\":2.5,\"rules\":[{\"condition\":{\"employee\":true},\"force\":0}]},\"meal_overrides_gluten_free\":{\"defaultValue\":{\"meal_type\":\"standard\",\"dessert\":\"Strawberry Cheesecake\"},\"rules\":[{\"condition\":{\"dietaryRestrictions\":{\"$elemMatch\":{\"$eq\":\"gluten_free\"}}},\"force\":{\"meal_type\":\"gf\",\"dessert\":\"French Vanilla Ice Cream\"}}]}},\"dateUpdated\":\"2023-01-11T00:26:01.745Z\"}";
        String attributes = "{}";
        String url = "http://localhost:8080/url-feature-force?gb~meal_overrides_gluten_free=%7B%22meal_type%22%3A%20%22gf%22%2C%20%22dessert%22%3A%20%22French%20Vanilla%20Ice%20Cream%22%7D&gb~dark_mode=true&gb~donut_price=3.33&gb~banner_text=Hello%2C%20everyone!%20I%20hope%20you%20are%20all%20doing%20well!";
        GBContext context = GBContext
                .builder()
                .featuresJson(featuresJson)
                .attributesJson(attributes)
                .url(url)
                .allowUrlOverrides(true)
                .build();
        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        GrowthBook subject = new GrowthBook(context, featuresRepository);

        FeatureResult<String> result = subject.evalFeature("banner_text", String.class);

        assertEquals("Hello, everyone! I hope you are all doing well!", result != null ? result.getValue() : null);
        assertEquals(FeatureResultSource.URL_OVERRIDE, result != null ? result.getSource() : null);
    }

    @Test
    void test_withUrl_evaluateFeature_forcesFloatValue() {
        String featuresJson = "{\"status\":200,\"features\":{\"banner_text\":{\"defaultValue\":\"Welcome to Acme Donuts!\",\"rules\":[{\"condition\":{\"country\":\"france\"},\"force\":\"Bienvenue au Beignets Acme !\"},{\"condition\":{\"country\":\"spain\"},\"force\":\"¡Bienvenidos y bienvenidas a Donas Acme!\"}]},\"dark_mode\":{\"defaultValue\":false,\"rules\":[{\"condition\":{\"loggedIn\":true},\"force\":true,\"coverage\":0.5,\"hashAttribute\":\"id\"}]},\"donut_price\":{\"defaultValue\":2.5,\"rules\":[{\"condition\":{\"employee\":true},\"force\":0}]},\"meal_overrides_gluten_free\":{\"defaultValue\":{\"meal_type\":\"standard\",\"dessert\":\"Strawberry Cheesecake\"},\"rules\":[{\"condition\":{\"dietaryRestrictions\":{\"$elemMatch\":{\"$eq\":\"gluten_free\"}}},\"force\":{\"meal_type\":\"gf\",\"dessert\":\"French Vanilla Ice Cream\"}}]}},\"dateUpdated\":\"2023-01-11T00:26:01.745Z\"}";
        String attributes = "{}";
        String url = "http://localhost:8080/url-feature-force?gb~meal_overrides_gluten_free=%7B%22meal_type%22%3A%20%22gf%22%2C%20%22dessert%22%3A%20%22French%20Vanilla%20Ice%20Cream%22%7D&gb~dark_mode=true&gb~donut_price=3.33&gb~banner_text=Hello%2C%20everyone!%20I%20hope%20you%20are%20all%20doing%20well!";
        GBContext context = GBContext
                .builder()
                .featuresJson(featuresJson)
                .attributesJson(attributes)
                .url(url)
                .allowUrlOverrides(true)
                .build();
        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);
        GrowthBook subject = new GrowthBook(context, featuresRepository);

        FeatureResult<Float> result = subject.evalFeature("donut_price", Float.class);

        assertEquals(3.33f, result != null ? result.getValue() : null);
        assertEquals(FeatureResultSource.URL_OVERRIDE, result != null ? result.getSource() : null);
    }

    @Test
    void test_withUrl_evaluateFeature_forcesIntegerValue() {
        String featuresJson = "{\"status\":200,\"features\":{\"banner_text\":{\"defaultValue\":\"Welcome to Acme Donuts!\",\"rules\":[{\"condition\":{\"country\":\"france\"},\"force\":\"Bienvenue au Beignets Acme !\"},{\"condition\":{\"country\":\"spain\"},\"force\":\"¡Bienvenidos y bienvenidas a Donas Acme!\"}]},\"dark_mode\":{\"defaultValue\":false,\"rules\":[{\"condition\":{\"loggedIn\":true},\"force\":true,\"coverage\":0.5,\"hashAttribute\":\"id\"}]},\"donut_price\":{\"defaultValue\":2.5,\"rules\":[{\"condition\":{\"employee\":true},\"force\":0}]},\"meal_overrides_gluten_free\":{\"defaultValue\":{\"meal_type\":\"standard\",\"dessert\":\"Strawberry Cheesecake\"},\"rules\":[{\"condition\":{\"dietaryRestrictions\":{\"$elemMatch\":{\"$eq\":\"gluten_free\"}}},\"force\":{\"meal_type\":\"gf\",\"dessert\":\"French Vanilla Ice Cream\"}}]}},\"dateUpdated\":\"2023-01-11T00:26:01.745Z\"}";
        String attributes = "{}";
        String url = "http://localhost:8080/url-feature-force?gb~meal_overrides_gluten_free=%7B%22meal_type%22%3A%20%22gf%22%2C%20%22dessert%22%3A%20%22French%20Vanilla%20Ice%20Cream%22%7D&gb~dark_mode=true&gb~donut_price=4&gb~banner_text=Hello%2C%20everyone!%20I%20hope%20you%20are%20all%20doing%20well!";
        GBContext context = GBContext
                .builder()
                .featuresJson(featuresJson)
                .attributesJson(attributes)
                .url(url)
                .allowUrlOverrides(true)
                .build();

        GBFeaturesRepository featuresRepository = Mockito.mock(GBFeaturesRepository.class);

        GrowthBook subject = new GrowthBook(context, featuresRepository);

        FeatureResult<Integer> result = subject.evalFeature("donut_price", Integer.class);

        assertEquals(4, result != null ? result.getValue() : null);
        assertEquals(FeatureResultSource.URL_OVERRIDE, result != null ? result.getSource() : null);
    }

    // endregion URL -> force features -> evaluateFeature

    // endregion URL -> force features
}
